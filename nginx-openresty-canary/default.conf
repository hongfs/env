lua_package_path "/etc/nginx/lua/?.lua;;";

server {
    listen 80;
    server_name _;

    location / {
        # docker run -d --name redis -p 6379:6379 redis:7.0.11
        default_type 'text/plain';

        # 通过请求头进行简易的判断
        set_by_lua_block $newversion_token {
            local token = ngx.req.get_headers()['Authorization'];

            if token == nil then
                return '';
            end

            if string.len(token) > 40 or string.len(token) < 40 then
                return '';
            end

            if string.sub(token, 1, 1) ~= 'A' then
                return '';
            end

            return '1';
        }

        # 通过来源IP进行判断
        set $newversion_ip '';
        content_by_lua_block {
            local ip = ngx.var.remote_addr;

            ngx.log(ngx.ERR, '当前ip:' + ip);
            ngx.say('Hello,say!')
            ngx.print('Hello,print!')

            if ip == nil then
                return '';
            end

            local redis = require "lua-resty-redis.lib.resty.redis";
            local red = redis:new();
            red:set_timeouts(1000, 1000, 1000);

            local ok, err = red:connect("10.0.16.15", 6379);

            if not ok then
                ngx.say("failed to connect: ", err);
                return '';
            end

            local res, err = red:hget("newversion", ip);

            if not res then
                ngx.say("failed to get newversion: ", err);
                return '';
            end

            if res == ngx.null then
                return '';
            end

            if res == '1' then
                ngx.var.newversion_ip = '1';
                return '1';
            end

            return '';
        }

        # if ($newversion_ip = '1') {
        #     proxy_pass http://127.0.0.1:83;
        #     break;
        # }

        # if ($newversion_token = '1') {
        #     proxy_pass http://127.0.0.1:82;
        #     break;
        # }

        # proxy_pass http://127.0.0.1:81;

        echo $newversion_token;
    }
}

server {
    listen 81;
    server_name _;

    location / {
        return 200 "success";
    }
}

server {
    listen 82;
    server_name _;

    location / {
        return 200 "new version for header";
    }
}

server {
    listen 83;
    server_name _;

    location / {
        return 200 "new version for ip";
    }
}
